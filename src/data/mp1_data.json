[["apply (rule impI)", []], ["apply (rule conjI)", ["1. A & B --> B & A", "1. A & B ==> B & A"]], ["apply (erule conjE)", ["1. A & B ==> B", "2. A & B ==> A"]], ["apply assumption", []], ["apply (erule conjE)", ["1. [| A; B |] ==> B", "2. A & B ==> A"]], ["apply assumption", ["1. A & B ==> A", "1. [| A; B |] ==> A"]], ["apply (rule impI)", ["1. A | B --> B | A"]], ["apply (rule disjE)", ["1. A | B ==> B | A"]], ["apply assumption", ["1. A | B ==> ?P2 | ?Q2", "2. [| A | B; ?P2 |] ==> B | A", "3. [| A | B; ?Q2 |] ==> B | A"]], ["apply (rule disjI2)", ["1. [| A | B; A |] ==> B | A", "2. [| A | B; B |] ==> B | A"]], ["apply assumption", ["1. [| A | B; A |] ==> A", "2. [| A | B; B |] ==> B | A"]], ["apply (rule disjI1)", ["1. [| A | B; B |] ==> B | A"]], ["apply assumption", ["1. [| A | B; B |] ==> B"]], ["apply (rule impI)", []], ["apply (rule impI)", ["1. A & B --> ~ B --> ~ A"]], ["apply (erule notE)", ["1. A & B ==> ~ B --> ~ A"]], ["apply (erule conjE)", ["1. [| A & B; ~ B |] ==> ~ A"]], ["apply assumption", ["1. A & B ==> B"]], ["apply (rule impI)", []], ["apply (rule impI)", ["1. (A --> B) --> ~ B --> ~ A"]], ["apply (rule notI)", ["1. A --> B ==> ~ B --> ~ A"]], ["apply (erule impE)", ["1. [| A --> B; ~ B |] ==> ~ A"]], ["apply assumption", ["1. [| A --> B; ~ B; A |] ==> False"]], ["apply (erule notE)", ["1. [| ~ B; A |] ==> A", "2. [| ~ B; A; B |] ==> False"]], ["apply assumption", ["1. [| ~ B; A; B |] ==> False"]], ["apply (rule impI)", []], ["apply (rule impI)", ["1. (A & B --> C) --> A --> B --> C"]], ["apply (rule impI)", ["1. A & B --> C ==> A --> B --> C"]], ["apply (erule impE)", ["1. [| A & B --> C; A |] ==> B --> C"]], ["apply (rule conjI)", ["1. [| A & B --> C; A; B |] ==> C"]], ["apply assumption", ["1. [| A; B |] ==> A & B", "2. [| A; B; C |] ==> C"]], ["apply assumption", ["1. [| A; B |] ==> A", "2. [| A; B |] ==> B", "3. [| A; B; C |] ==> C"]], ["apply assumption", ["1. [| A; B |] ==> B", "2. [| A; B; C |] ==> C"]], ["apply (rule impI)", []], ["apply (rule notI)", ["1. ~ B | ~ A --> ~ (A & B)"]], ["apply (erule conjE)", ["1. ~ B | ~ A ==> ~ (A & B)"]], ["apply (erule disjE)", ["1. [| ~ B | ~ A; A & B |] ==> False"]], ["apply (erule notE)", ["1. [| ~ B | ~ A; A; B |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ B |] ==> False", "2. [| A; B; ~ A |] ==> False"]], ["apply (erule notE)", ["1. [| A; B |] ==> B", "2. [| A; B; ~ A |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ A |] ==> False"]], ["apply (rule impI)", []], ["apply (rule notI)", ["1. ~ A | ~ B --> ~ (A & B)"]], ["apply (erule conjE)", ["1. ~ A | ~ B ==> ~ (A & B)"]], ["apply (erule disjE)", ["1. [| ~ A | ~ B; A & B |] ==> False"]], ["apply (erule notE)", ["1. [| ~ A | ~ B; A; B |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ A |] ==> False", "2. [| A; B; ~ B |] ==> False"]], ["apply (erule notE)", ["1. [| A; B |] ==> A", "2. [| A; B; ~ B |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ B |] ==> False"]], ["apply (rule classical)", []], ["apply (erule notE)", ["1. ~ ~ A ==> A"]], ["apply assumption", ["1. [| ~ ~ A; ~ A |] ==> A"]], ["apply (rule impI)", []], ["apply (rule doubleE)", ["1. ~ ~ A --> A"]], ["apply assumption", ["1. ~ ~ A ==> A"]], ["apply (rule classical)", []], ["apply (rule disjI1)", ["1. A | ~ A"]], ["apply (rule doubleE)", ["1. ~ (A | ~ A) ==> A | ~ A"]], ["apply (rule notI)", ["1. ~ (A | ~ A) ==> A"]], ["apply (erule notE)", ["1. ~ (A | ~ A) ==> ~ ~ A"]], ["apply (rule disjI2)", ["1. [| ~ (A | ~ A); ~ A |] ==> False"]], ["apply assumption", ["1. ~ A ==> A | ~ A"]], ["apply (rule impI)", []], ["apply (rule impI)", ["1. (~ A --> B) --> ~ B --> A"]], ["apply (rule classical)", []], ["apply (erule impE)", ["1. [| ~ A --> B; ~ B |] ==> A"]], ["apply assumption", ["1. [| ~ A --> B; ~ B; ~ A |] ==> A"]], ["apply (erule notE)", ["1. [| ~ B; ~ A |] ==> ~ A", "2. [| ~ B; ~ A; B |] ==> A"]], ["apply assumption", ["1. [| ~ B; ~ A; B |] ==> A"]], ["apply (rule impI)", []], ["apply (rule classical)", ["1. ((A --> B) --> A) --> A"]], ["apply (erule impE)", ["1. (A --> B) --> A ==> A"]], ["apply (rule impI)", ["1. [| (A --> B) --> A; ~ A |] ==> A"]], ["apply (erule notE)", ["1. ~ A ==> A --> B", "2. [| ~ A; A |] ==> A"]], ["apply assumption", ["1. [| ~ A; A |] ==> B", "2. [| ~ A; A |] ==> A"]], ["apply assumption", ["1. A ==> A", "2. [| ~ A; A |] ==> A"]], ["apply (rule classical)", []], ["apply (erule notE)", ["1. ~ (A & B) ==> ~ A | ~ B"]], ["apply (rule conjI)", ["1. [| ~ (A & B); ~ (~ A | ~ B) |] ==> ~ A | ~ B"]], ["apply (rule classical)", ["1. ~ (~ A | ~ B) ==> A & B"]], ["apply (erule notE)", ["1. ~ (~ A | ~ B) ==> A", "2. ~ (~ A | ~ B) ==> B"]], ["apply (rule disjI1)", ["1. [| ~ (~ A | ~ B); ~ A |] ==> A", "2. ~ (~ A | ~ B) ==> B"]], ["apply assumption", ["1. ~ A ==> ~ A | ~ B", "2. ~ (~ A | ~ B) ==> B"]], ["apply (rule classical)", ["1. ~ A ==> ~ A", "2. ~ (~ A | ~ B) ==> B"]], ["apply (erule notE)", ["1. ~ (~ A | ~ B) ==> B"]], ["apply (rule disjI2)", ["1. [| ~ (~ A | ~ B); ~ B |] ==> B"]], ["apply assumption", ["1. ~ B ==> ~ A | ~ B"]], ["apply (rule notI)", []], ["apply (erule conjE)", ["1. ~ A | ~ B ==> ~ (A & B)"]], ["apply (erule disjE)", ["1. [| ~ A | ~ B; A & B |] ==> False"]], ["apply (erule notE)", ["1. [| ~ A | ~ B; A; B |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ A |] ==> False", "2. [| A; B; ~ B |] ==> False"]], ["apply (erule notE)", ["1. [| A; B |] ==> A", "2. [| A; B; ~ B |] ==> False"]], ["apply assumption", ["1. [| A; B; ~ B |] ==> False"]], ["apply (rule iffI)", []], ["apply (rule dem1)", ["1. (~ (A & B)) = (~ A | ~ B)"]], ["apply assumption", ["1. ~ (A & B) ==> ~ A | ~ B", "2. ~ A | ~ B ==> ~ (A & B)"]], ["apply (rule dem2)", ["1. ~ (A & B) ==> ~ (A & B)", "2. ~ A | ~ B ==> ~ (A & B)"]], ["apply assumption", ["1. ~ A | ~ B ==> ~ (A & B)"]], ["apply (rule impI)", []], ["apply (rule doubleE)", ["1. (~ A --> False) --> A"]], ["apply (rule notI)", ["1. ~ A --> False ==> A"]], ["apply (erule impE)", ["1. ~ A --> False ==> ~ ~ A"]], ["apply assumption", ["1. [| ~ A --> False; ~ A |] ==> False"]], ["apply assumption", ["1. ~ A ==> ~ A", "2. [| ~ A; False |] ==> False"]]]